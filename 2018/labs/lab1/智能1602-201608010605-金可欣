实验报告
实验名称（测量FFT程序执行时间）
班级 智能1602      学号 201608010605     姓名 金可欣
实验目标
测量FFT程序运行时间，确定其时间复杂度。
实验要求
采用C/C++编写程序
根据自己的机器配置选择合适的输入数据大小 n，至少要测试多个不同的 n (参见思考题)
对于相同的 n，建议重复测量30次取平均值作为测量结果 (参见思考题)
对测量结果进行分析，确定FFT程序的时间复杂度
回答思考题，答案加入到实验报告叙述中合适位置
思考题
1.分析FFT程序的时间复杂度，得到执行时间相对于数据规模 n 的具体公式
2.根据上一点中的分析，至少要测试多少不同的 n 来确定执行时间公式中的未知数？
3.重复30次测量然后取平均有什么统计学的依据？
实验内容
FFT算法代码
FFT的算法可以参考这里。
/* fft.cpp *  * This is a KISS implementation of * the Cooley-Tukey recursive FFT algorithm. * This works, and is visibly clear about what is happening where. * * To compile this with the GNU/GCC compiler: * g++ -o fft fft.cpp -lm * * To run the compiled version from a *nix command line: * ./fft * */
#include <complex>
#include <cstdio>


#define M_PI 3.14159265358979323846 // Pi constant with double precision
using namespace std;
// separate even/odd elements to lower/upper halves of array respectively.// Due to Butterfly combinations, this turns out to be the simplest way // to get the job done without clobbering the wrong elements.void separate (complex<double>* a, int n) {
    complex<double>* b = new complex<double>[n/2];  // get temp heap storage
    for(int i=0; i<n/2; i++)    // copy all odd elements to heap storage
        b[i] = a[i*2+1];
    for(int i=0; i<n/2; i++)    // copy all even elements to lower-half of a[]
        a[i] = a[i*2];
    for(int i=0; i<n/2; i++)    // copy all odd (from heap) to upper-half of a[]
        a[i+n/2] = b[i];
    delete[] b;                 // delete heap storage
}
// N must be a power-of-2, or bad things will happen.// Currently no check for this condition.//// N input samples in X[] are FFT'd and results left in X[].// Because of Nyquist theorem, N samples means // only first N/2 FFT results in X[] are the answer.// (upper half of X[] is a reflection with no new information).void fft2 (complex<double>* X, int N) {
    if(N < 2) {
        // bottom of recursion.
        // Do nothing here, because already X[0] = x[0]
    } else {
        separate(X,N);      // all evens to lower half, all odds to upper half
        fft2(X,     N/2);   // recurse even items
        fft2(X+N/2, N/2);   // recurse odd  items
        // combine results of two half recursions
        for(int k=0; k<N/2; k++) {
            complex<double> e = X[k    ];   // even
            complex<double> o = X[k+N/2];   // odd
                         // w is the "twiddle-factor"
            complex<double> w = exp( complex<double>(0,-2.*M_PI*k/N) );
            X[k    ] = e + w * o;
            X[k+N/2] = e - w * o;
        }
    }
}
// simple test programint main () {
    const int nSamples = 64;
    double nSeconds = 1.0;                      // total time for sampling
    double sampleRate = nSamples / nSeconds;    // n Hz = n / second 
    double freqResolution = sampleRate / nSamples; // freq step in FFT result
    complex<double> x[nSamples];                // storage for sample data
    complex<double> X[nSamples];                // storage for FFT answer
    const int nFreqs = 5;
    double freq[nFreqs] = { 2, 5, 11, 17, 29 }; // known freqs for testing
    
    // generate samples for testing
    for(int i=0; i<nSamples; i++) {
        x[i] = complex<double>(0.,0.);
        // sum several known sinusoids into x[]
        for(int j=0; j<nFreqs; j++)
            x[i] += sin( 2*M_PI*freq[j]*i/nSamples );
        X[i] = x[i];        // copy into X[] for FFT work & result
    }
    // compute fft for this data
    fft2(X,nSamples);
    
    printf("  n\tx[]\tX[]\tf\n");       // header line
    // loop to print values
    for(int i=0; i<nSamples; i++) {
        printf("% 3d\t%+.3f\t%+.3f\t%g\n",
            i, x[i].real(), abs(X[i]), i*freqResolution );
    }
}
// eof
FFT程序时间复杂度分析
通过分析FFT算法代码，可以得到该FFT算法的时间复杂度具体公式为：

其中n为数据大小，未知数有：
1.10000
2.100000
3.1000000
4.10000000
测试
测试平台
在如下机器上进行了测试：
部件	配置	备注
CPU	双核	
内存	4GB	
操作系统	Ubuntu 16.04 LTS	中文版
测试记录
FFT程序的测试输入文件请见这里。
FFT程序运行过程的截图如下：

太多不放了。
FFT程序的输出——（seconds time elapsed）
10000  	 0.031
100000 	 0.32
1000000	 0.18
10000000	 0.16
50000		 0.17

分析和结论
从测试记录来看，FFT程序的执行时间并没有如预期那样随数据规模增大而增大。在n取1000000和1000000时执行时间相差不大。
思考题
重复30次取平均值可以在一定程度上减小误差。通过降低低频数据的权重，使得数据趋向于一个合理的范围。
关于要测试多少组数据……我觉得需要可以获得一条接近准确的可以分析的曲线，才能算是测了足够的数据。
